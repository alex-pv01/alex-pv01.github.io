[{"content":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Mixed-Privacy Forgetting in Deep Networks by Aditya Golatkar, Alessandro Achille, Avinash Ravichandran, Marzia Polito, and Stefano Soatto.\nGolatkar et. al. introduce a novel method for forgetting in a mixed-privacy setting, where a core subset of the training samples will not be forgotten. Their method allow efficient removal of all non-core (a.k.a. user) data by simply setting to zero a subset of the weights of the model, with minimal loss in performance. To do so, they introduce Mixed-Linear Forgetting (ML-Forgetting), which they claim to be the first algorithm to achieve forgettiing for deep networks trained on large-scale computer vision problems without compromising the accuracy.\nContributions Introduce the problem of mixed-privacy forgetting in deep networks. Propose ML-Forgetting, that trains a set of non-linear core weights and a set of linear user weights. By-design, ML-Forgetting allows to forget user all data by setting the user weights to zero. First algorithm to achieve forgetting for deep networks trained on large-scale computer vision problems without compromising the accuracy. Can handle multiple sequential forgetting requests, as well as class removal. Mixed-Linear Forgetting The main idea behind the method lies in the concept of quadratic forgetting, which comes from forgetting from a linear regression model, that has a quadratic loss function. User data is learned using such loss function, taking advantage of its convexity. First, they introduce the Mixed-Linear model, and then discuss the forgetting mechanism.\nMixed-Linear Model Two separate minimization problems are solved, one for the core data ($\\mathcal{D}_c$) and one for the user data ($\\mathcal{D}_u$). If $f_{\\textbf{w}}$ is the model with parameters $\\textbf{w}$, we have:\n$$\\textbf{w}_c^* = \\arg\\min_{\\textbf{w}_c} L_{\\mathcal{D_c}}(f_{\\textbf{w}_c})$$ $$\\textbf{w}_u^* = \\arg\\min_{\\textbf{w}_u} L_{\\mathcal{D_u}}(f_{\\textbf{w}_c^*+\\textbf{w}_u})$$\nwhere $L_{\\mathcal{D}}$ is the loss function for the dataset $\\mathcal{D}$. Since the deep network $f_{\\textbf{w}}$ is non-linear, the loss function $L_{\\mathcal{D}_u}(f_{\\textbf{w}_c^*+\\textbf{w}_u})$ can be highly non-convex. In light of [2], if $\\textbf{w}_u$ is a small perturbation, we can hope for a linear approximation $f_{\\textbf{w}}$ around $f_{\\textbf{w}_c^*}$, to have a similar performance to fine-tuning the entire model. Thus, the Mixed-Linear model is defined as the first-order Taylor expansion:\n$$f^{\\text{ML}}_{\\textbf{w}_c^*+\\textbf{w}_u} (\\textbf{x}) = f_{\\textbf{w}_c^*}(\\textbf{x}) + \\nabla_w f_{\\textbf{w}_c^*}(\\textbf{x}) \\cdot \\textbf{w}_u$$\nFurthermore, they use Cross-Entropy loss and Mean Squared Error loss, leading to the following minimization problem:\n$$\\textbf{w}_c^* = \\arg\\min_{\\textbf{w}_c} L^{\\text{CE}}_{\\mathcal{D_c}}(f_{\\textbf{w}_c})$$ $$\\textbf{w}_u^* = \\arg\\min_{\\textbf{w}_u} L^{\\text{MSE}}_{\\mathcal{D_u}}(f^{\\text{ML}}_{\\textbf{w}_c^*+\\textbf{w}_u})$$\nThe MSE loss has the advantage that the weights $\\textbf{w}_u$ are the solution of a quadratic minimization problem, which can be solved in closed form.\nForgetting Mechanism As seen in [3] and [4], in the case of the quadratic training loss, the optimal forgetting step to delete $\\mathcal{D}_f \\subset \\mathcal{D}$ is given by: $$\\textbf{w}_u \\mapsto \\textbf{w}_u - \\Delta\\textbf{w}_u + \\sigma^2 \\epsilon$$ where $\\Delta\\textbf{w}_u = H^{-1}_{\\mathcal{D}_r}(\\textbf{w}_c)\\nabla_\\textbf{w}L_{\\mathcal{D}_r}(f_{\\textbf{w}_u})$ is the optimal forgetting step, $H_{\\mathcal{D}_r}(\\textbf{w}_c)$ is the Hessian of the loss function $L_{\\mathcal{D}_r}$, $\\mathcal{D}_r=\\mathcal{D}-\\mathcal{D}_f$ is the retained data, and $\\epsilon \\sim N(0,I)$ is a random noise vector. As $\\Delta\\textbf{w}_u$ is only an approximation of the optimal forgetting step, by adding noise, they can destroy the information that may leak. In practice is not feasible to compute the Hessian, so they use the Jacobian-Vector Product (JVP) instead (see [2]).\nPersonal considerations: Although the method is interesting, I am not sure how practical it is. The theoretical framework heavily relies on the assumption that the perturbation $\\textbf{w}_u$ is small, which may not be the case in practice. I find useful the fact of using core data to train a \u0026ldquo;foundational\u0026rdquo; (or core) model and then fine-tune it with user data (actually, this is the trend in SOTA models e.g., for generative AI). However, if the user data is far from being \u0026ldquo;small enough\u0026rdquo; and because of the linear approximation, the method may not work as expected. References [1] Golatkar, A., Achille, A., Ravichandran, A., Polito, M., \u0026amp; Soatto, S. (2021). Mixed-Privacy Forgetting in Deep Networks arXiv:2012.13431.\n[2] Mu, F., Liang, Y., \u0026amp; Li, Y. (2020). Gradients as features for deep representation learning. arXiv:2004.05529\n[3] Guo, C., Goldstein, T., Hannun, A., \u0026amp; Van Der Maaten, L. (2020). Certified data removal from machine learning models arXiv:911.03030\n[4] Golatkar, A., Achille, A., \u0026amp; Soatto, S. (2020). Eternal sunshine of the spotless net: Selective forgetting in deep networks arXiv:1911.04933\n","permalink":"https://alex-pv01.github.io/posts/papers/mixed-privacy-forgetting-in-deep-networks/","summary":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Mixed-Privacy Forgetting in Deep Networks by Aditya Golatkar, Alessandro Achille, Avinash Ravichandran, Marzia Polito, and Stefano Soatto.\nGolatkar et. al. introduce a novel method for forgetting in a mixed-privacy setting, where a core subset of the training samples will not be forgotten.","title":"Notes on Mixed-Privacy Forgetting in Deep Networks"},{"content":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Multi Class Explainable Unlearning for Image Classification via Weight Filtering by Samuele Poppi, Sara Sarto, Marcella Cornia, Lorenzo Baraldi and Rita Cucchiara.\nSamuele P., et. al. propose a novel approach to unlearn a multiple classes from a pre-trained image classification model in a single untraining round. The technique learns a \u0026ldquo;Weight Filtering Network\u0026rdquo; (WF-Net) that is able to modulate the inner components of the model to remove the class of interest. The method discovers the weights that are responsible for the classification of the target class and then filters them out. This approach implicitly discovers the underlying relationships between network inner components and output classes and therefore allows to obtain a representation that can be employed for explainability purposes.\nIn comparison with single-class unlearning, WF-Net avoids the need of storing multiple models and performing multiple untraining rounds. This allows for a significant reduction in computational costs and memory usage, both at untraining and testing stages and provides increased flexibility.\nThe key observation is that there is a mapping between the inner components of a network and the output classes, as stated in [2]. Once trained, WF-Net is able to turn on and off those inner components to accomplish the desired unlearning behaviour on a class of choice. In practice, each layer $l$ of the pre-trained model is point-wise multiplied by a Weight Filtering (WF) layer $\\alpha_l$, which allows to modulate the weights of the model. The WF-Net, which is the sequence of all WF layers $\\alpha:=\\{\\alpha_l\\}_l$, is trained to remove a number of classes $N_c$ from the model. Note that $\\alpha_l$ has shape $N_c \\times K$, where $K$ is the length of $w_l$. After a single untraining round we end up with a single checkpoint of the WF-Net that can be used to instruct the model to behave as if any of the $N_c$ classes were never learned. It is possible to forget all classes at same time by setting $N_c$ to the total number of classes in the model. There are three key aspects regarding the training of the WF-Net:\nLoss function: Is composed of two terms, an unlearning loss $L_f$ and a retaining loss $L_r$. Both are implemented as cross-entropy losses. The total loss should be minimized zeroing $L_r(\\cdot)$ while maximizing $L_f(\\cdot)$: $$ L = \\lambda_0 \\sum_{(x,y)\\in\\mathcal{D_r}} L_r(M(x),y) + \\lambda_1 \\sum_{(x,y)\\in\\mathcal{D_f}} \\frac{1}{L_f(M(x),y)}$$ where $\\mathcal{D_r}$ and $\\mathcal{D_f}$ are the datasets of the classes to be retained and forgotten, respectively, $\\lambda_0$ and $\\lambda_1$ are hyperparameters that control the importance of the two terms, and $M$ is the WF model, i.e. the pre-trained model with fixed weights together with the WF-Net.\nRegularization: Adding a regularizer $R(\\cdot)$ to ensure only few parameters of $\\alpha_l$ are dropped to zero. $R(\\hat\\alpha)$ is computed as the average of inverted alphas $\\hat\\alpha_l:=1-\\alpha_l$: $$ L = \\lambda_0 \\sum_{(x,y)\\in\\mathcal{D_r}} L_r(M(x),y) + \\lambda_1 \\sum_{(x,y)\\in\\mathcal{D_f}} \\frac{1}{L_f(M(x),y)} + \\lambda_2 R(\\hat\\alpha)$$\nLabel expansion: To realize untraining of all classes simultaneously, during the training process, each mini-batch of size $B$ is divided into two halves, obtaining $B/2$ samples from the classes to be unlearned and $B/2$ samples from the classes to be retained. Samples from the first half are labeled with the original labels, while samples from the second half are randomly labeled. The random strategy is used to randomly retain one of the rows of each $\\alpha_l$. This retain step is performed $T$ times, pairing each time the samples with a different random label, and expanding the size of the retaining loss to $(T, B/2)$. The last step is averaging both losses.\nPersonal considerations: Note that this approach is not really about unlearning, but about modulating the weights of the network using an additional network that is able to filter out the weights that are responsible for the classification of one (or more) of the $N_c$ classes to be forgotten. Despite that, it is an interesting method that can be used to improve the explainability models while acting \u0026ldquo;as if\u0026rdquo; the model has been untrained from a certain class.\nI am sceptical about the computational efficiency of the model. As far as I understand, the WF-Net has as many parameters as the pre-trained model, and expands the size of the mini-batches by a factor of $T$. This could lead to a significant increase in the computational cost of the training process of the WF-Net.\nReferences [1] Poppi, S., Sarto, S., Cornia, M., Baraldi, L., \u0026amp; Cucchiara, R. (2023). Multi Class Explainable Unlearning for Image Classification via Weight Filtering. arXiv:2304.02049.\n[2] Wang, A., Lee, W., \u0026amp; Qi, X. (2022). HINT: Hierarchical Neuron Concept Explainer. arXiv:2203.14196.\n","permalink":"https://alex-pv01.github.io/posts/papers/multi-class-explainable-unlearning-for-image-classification-via-weight-filtering/","summary":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Multi Class Explainable Unlearning for Image Classification via Weight Filtering by Samuele Poppi, Sara Sarto, Marcella Cornia, Lorenzo Baraldi and Rita Cucchiara.\nSamuele P., et. al.","title":"Notes on Multi Class Explainable Unlearning for Image Classification via Weight Filtering"},{"content":"Attention mechanisms are a type of techniques used in natural language processing (NLP) tasks that allow a model to focus on specific parts of the input when processing a sequence, rather than considering the entire sequence at once. These methods can improve the performance of the model by allowing it to efficiently process long sequences of text and make more accurate predictions.\nTo some extend, attention mechanisms are motivated by how human visual attention focuses on different regions of an image or how correlates words in a sentence. They were born to deal with long sequences in sequence-to-sequence tasks. That is, any problem that requieres a sequence as an input, and outputs another sequence. For example, in machine translation, attention mechanisms can allow the model to translate each word in the source language sentence one at a time, focusing on the most relevant words in the source sentence at each step. This can be especially important for tasks that involve long sentences, as it allows the model to better capture the meaning and context of the input.\nThey have become a key component of many other tasks, not only in machine translation but also in other problems such as summarization, and language modeling. They have been shown to improve the performance of various models and are an active area of research in the field.\nHow attention mechanisms work: Attention mechanisms are often implemented as part of a recurrent neural network (RNN) in a sequence-to-sequence model, is compossed by an encoder and a decoder:\nThe encoder is a RNN that processes the input sequence and compresses the information into a context vector. Such vector represents the whole input sequence and is expected to be a good summary of its meaning.\nThe decoder is another RNN that recieves the context vector and outputs a transformed vector that ideally solves the problem we are dealing with.\nBy construction of the RNNs the context vector has a fixed size an requires the implementation of an attentenion mechanism to deal with long sequences, since otherwise the model \u0026ldquo;forgets\u0026rdquo; information.\nIn a broad sense, the seq2seq model processes the input sequence one element at a time. At each step, the attention mechanism calculates the weights for each element in the input sequence based on their relevance to the current state of the model. The weights can be calculated using various similarity measures, such as the dot product between the current state of the model and each element in the input sequence.\nMore formally, consider we have an input sequence $\\textbf{x}$ of lenght $n$ and that we want to output a target sequence $\\textbf{y}$ of lenght $m$,\n\\begin{align*} \\textbf{x} = [x_1, \\dots, x_n] \\\\ \\textbf{y} = [y_1, \\dots, y_m]. \\end{align*}\nWe start by initializing the hidden state of encoder, which can be a random vector, $\\bar{\\textbf{h}}_0$. While the sequence is not finished, it takes as input, one element at a time from $\\textbf{x}$ and the previous hidden state. At each step it generates a new vector $\\bar{\\textbf{h}}_i$ called hidden state of the encoder at step $i$, for $i = 1, \\dots, n$. Notice that each $\\bar{\\textbf{h}}_i$ is presumably more associated with the element $x_i$. Once, all the hidden states are processed, they are sent to the decoder.\nThe decoder also has its hidden state initialized, $\\textbf{h}_0$. Then, it takes at each step $t$ a weighted combination of the encoder hidden states as a current context vector, the previous decoder\u0026rsquo;s hidden state and the previous element of the output sequence to predict the value $y_t$. That is, for $t=1,\\dots, m$, the decoder\u0026rsquo;s hidden state at $t+1$ is of the form $\\textbf{h}_{t+1} = f(\\textbf{h}_t, \\textbf{c}_{t+1}, y_t)$, where:\n\\begin{align*} \\textbf{c}_t \u0026amp; = \\sum_{i=1}^n \\alpha_{t,i} \\bar{\\textbf{h}}_i \\quad \\hfill \u0026amp;; \\text{is the context vector at step }t. \\\\ \\alpha_{t+1,i} \u0026amp; = \\frac{\\exp(\\text{score}(\\textbf{h}_t, \\bar{\\textbf{h}}_i))}{\\sum_{i\u0026rsquo;=1}^n\\exp(\\text{score}(\\textbf{h}_t, \\bar{\\textbf{h}}_{i\u0026rsquo;}))} \\quad \\hfill \u0026amp;; \\text{softmaxed similarity score.} \\end{align*}\nThe $\\text{score}$ function assigns a measure of similarity between hidden states. There are several ways to approach it, first introduced by Bahdanau, et al., 2014 and Luong, et al., 2015. For instance, one could use as a simple similarity function the dot product. The value $\\alpha_{t,i}$ aims to indicate the similarity between element $y_t$ and $x_i$.\nFinally, in order to predict the value $\\textbf{y}_t$, the model concatenates the hidden layer $\\textbf{h}_t$ and the context vector $\\textbf{c}_t$, and pass them through a feedforward neural network that is trained simultaneously. This process is then repited until the completion of the output sequence.\nBahdanau attention: Bahdanau attention, also known as additive attention, is a type of attention mechanism that was introduced in a 2014 paper by Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. It is widely used and has been shown to improve the performance of several models regarding NLP tasks.\nIt is introduced in the previous model by defining the following $\\text{score}$ function:\n$$ \\text{score}(\\textbf{h}_t, \\bar{\\textbf{h}}_i) = \\textbf{v}_a^T \\cdot \\text{tanh}(\\textbf{W}_a \\cdot [ \\textbf{h}_t ; \\bar{\\textbf{h}}_i ]) $$\nwhere $\\textbf{v}_a$ and $\\textbf{W}_a$ are weighted matrices to be learned in the training process. They can be implemented as dense layers using keras. For a python implementation of the Bahnadau attention mechanism one can be refered to the following Notebook.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 class BahdanauAttention(tf.keras.layers.Layer): def __init__(self, units): super(BahdanauAttention, self).__init__() self.W1 = tf.keras.layers.Dense(units) self.W2 = tf.keras.layers.Dense(units) self.V = tf.keras.layers.Dense(1) def call(self, query, values): query_with_time_axis = tf.expand_dims(query, 1) # BAHDANAU Additive score = self.V(tf.nn.tanh(self.W1(query_with_time_axis) + self.W2(values))) # attention_weights shape == (batch_size, max_length, 1) attention_weights = tf.nn.softmax(score, axis=1) # context_vector shape after sum == (batch_size, hidden_size) context_vector = attention_weights * values context_vector = tf.reduce_sum(context_vector, axis=1) return context_vector, attention_weights Luong attention: Luong attention, introduced in a 2015 paper by Minh-Thang Luong et al., is a variant of Bahdanau attention that uses different similarity measures to calculate the attention weights.\nOne common variant is dot-product attention, which calculates the attention weights as the dot product between the current state of the model and each element in the input sequence. That is,\n$$ \\text{score}(\\textbf{h}_t, \\bar{\\textbf{h}}_i) = \\textbf{h}_t^T \\cdot \\bar{\\textbf{h}}_i $$\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 class LuongDotAttention(tf.keras.layers.Layer): def __init__(self): super(LuongDotAttention, self).__init__() def call(self, query, values): query_with_time_axis = tf.expand_dims(query, 1) values_transposed = tf.transpose(values, perm=[0, 2, 1]) # LUONG Dot-product score = tf.transpose(tf.matmul(query_with_time_axis, values_transposed), perm=[0, 2, 1]) # attention_weights shape == (batch_size, max_length, 1) attention_weights = tf.nn.softmax(score, axis=1) # context_vector shape after sum == (batch_size, hidden_size) context_vector = attention_weights * values context_vector = tf.reduce_sum(context_vector, axis=1) return context_vector, attention_weights Another variant is general attention, which implements the attention weights $\\textbf{W}_a$ using a general linear function.\n$$ \\text{score}(\\textbf{h}_t, \\bar{\\textbf{h}}_i) = \\textbf{h}_t^T \\cdot \\textbf{W}_a \\cdot \\bar{\\textbf{h}}_i $$\nSuch $\\textbf{W}_a$ matrix is also to be learned during the training process. For a python implementation of the Luong attention mechanisms one can be refered to the following Notebook.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 class LuongGeneralAttention(tf.keras.layers.Layer): def __init__(self, units): super(LuongGeneralAttention, self).__init__() self.W = tf.keras.layers.Dense(units) def call(self, query, values): query_with_time_axis = tf.expand_dims(query, 1) values_transposed = tf.transpose(values, perm=[0, 2, 1]) # LUONG General score = tf.transpose(tf.matmul(self.W(query_with_time_axis), values_transposed), perm=[0, 2, 1]) # attention_weights shape == (batch_size, max_length, 1) attention_weights = tf.nn.softmax(score, axis=1) # context_vector shape after sum == (batch_size, hidden_size) context_vector = attention_weights * values context_vector = tf.reduce_sum(context_vector, axis=1) return context_vector, attention_weights Limitations of attention mechanisms: While attention mechanisms have been shown to be effective in many NLP tasks, they do have some limitations:\nComputational intensity: Attention mechanisms can be computationally intensive, especially for large input sequences. This can make them difficult to train and use in practice, for instance on large datasets.\nLimited ability to capture long-range dependencies: Attention mechanisms can struggle to accurately capture long-range dependencies in the input, as they only consider the current state of the model and the input elements when calculating the attention weights. This can lead to suboptimal performance on tasks that require the model to consider the relationship between distant elements in the input sequence.\nLimited interpretability: Attention mechanisms can be difficult to interpret, as it is often not clear how the attention weights are being calculated or how they are influencing the model\u0026rsquo;s predictions. This can make it difficult to understand the decision-making process of the model and debug any errors.\nLimited generalizability: Attention mechanisms may not generalize well to new data, as they are trained on specific datasets and may not be able to adapt to different input distributions.\nConclusion: Overall, attention mechanisms have many strengths and have been shown to be effective in many NLP tasks. However, it is important to be aware of their limitations and to carefully consider whether they are the best approach for a particular task. Having said so, attention mechanisms are an active area of research in NLP and there are many potential directions for future development. These developments could lead to more efficient, accurate, interpretable, and generalizable attention mechanisms, which could further improve the performance of NLP models and enable them to solve more complex tasks.\n","permalink":"https://alex-pv01.github.io/posts/attention/","summary":"Attention mechanisms are a type of techniques used in natural language processing (NLP) tasks that allow a model to focus on specific parts of the input when processing a sequence, rather than considering the entire sequence at once. These methods can improve the performance of the model by allowing it to efficiently process long sequences of text and make more accurate predictions.\nTo some extend, attention mechanisms are motivated by how human visual attention focuses on different regions of an image or how correlates words in a sentence.","title":"Attention and Context based Embeddings"}]