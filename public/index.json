[{"content":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Mixed-Privacy Forgetting in Deep Networks by Aditya Golatkar, Alessandro Achille, Avinash Ravichandran, Marzia Polito, and Stefano Soatto.\nGolatkar et. al. introduce a novel method for forgetting in a mixed-privacy setting, where a core subset of the training samples will not be forgotten. Their method allow efficient removal of all non-core (a.k.a. user) data by simply setting to zero a subset of the weights of the model, with minimal loss in performance. To do so, they introduce Mixed-Linear Forgetting (ML-Forgetting), which they claim to be the first algorithm to achieve forgettiing for deep networks trained on large-scale computer vision problems without compromising the accuracy.\nContributions Introduce the problem of mixed-privacy forgetting in deep networks. Propose ML-Forgetting, that trains a set of non-linear core weights and a set of linear user weights. By-design, ML-Forgetting allows to forget user all data by setting the user weights to zero. First algorithm to achieve forgetting for deep networks trained on large-scale computer vision problems without compromising the accuracy. Can handle multiple sequential forgetting requests, as well as class removal. Mixed-Linear Forgetting The main idea behind the method lies in the concept of quadratic forgetting, which comes from forgetting from a linear regression model, that has a quadratic loss function. User data is learned using such loss function, taking advantage of its convexity. First, they introduce the Mixed-Linear model, and then discuss the forgetting mechanism.\nMixed-Linear Model Two separate minimization problems are solved, one for the core data ($\\mathcal{D}_c$) and one for the user data ($\\mathcal{D}_u$). If $f_{\\textbf{w}}$ is the model with parameters $\\textbf{w}$, we have:\n$$\\textbf{w}_c^* = \\arg\\min_{\\textbf{w}_c} L_{\\mathcal{D_c}}(f_{\\textbf{w}_c})$$ $$\\textbf{w}_u^* = \\arg\\min_{\\textbf{w}_u} L_{\\mathcal{D_u}}(f_{\\textbf{w}_c^*+\\textbf{w}_u})$$\nwhere $L_{\\mathcal{D}}$ is the loss function for the dataset $\\mathcal{D}$. Since the deep network $f_{\\textbf{w}}$ is non-linear, the loss function $L_{\\mathcal{D}_u}(f_{\\textbf{w}_c^*+\\textbf{w}_u})$ can be highly non-convex. In light of [2], if $\\textbf{w}_u$ is a small perturbation, we can hope for a linear approximation $f_{\\textbf{w}}$ around $f_{\\textbf{w}_c^*}$, to have a similar performance to fine-tuning the entire model. Thus, the Mixed-Linear model is defined as the first-order Taylor expansion:\n$$f^{\\text{ML}}_{\\textbf{w}_c^*+\\textbf{w}_u} (\\textbf{x}) = f_{\\textbf{w}_c^*}(\\textbf{x}) + \\nabla_w f_{\\textbf{w}_c^*}(\\textbf{x}) \\cdot \\textbf{w}_u$$\nFurthermore, they use Cross-Entropy loss and Mean Squared Error loss, leading to the following minimization problem:\n$$\\textbf{w}_c^* = \\arg\\min_{\\textbf{w}_c} L^{\\text{CE}}_{\\mathcal{D_c}}(f_{\\textbf{w}_c})$$ $$\\textbf{w}_u^* = \\arg\\min_{\\textbf{w}_u} L^{\\text{MSE}}_{\\mathcal{D_u}}(f^{\\text{ML}}_{\\textbf{w}_c^*+\\textbf{w}_u})$$\nThe MSE loss has the advantage that the weights $\\textbf{w}_u$ are the solution of a quadratic minimization problem, which can be solved in closed form.\nForgetting Mechanism As seen in [3] and [4], in the case of the quadratic training loss, the optimal forgetting step to delete $\\mathcal{D}_f \\subset \\mathcal{D}$ is given by: $$\\textbf{w}_u \\mapsto \\textbf{w}_u - \\Delta\\textbf{w}_u + \\sigma^2 \\epsilon$$ where $\\Delta\\textbf{w}_u = H^{-1}_{\\mathcal{D}_r}(\\textbf{w}_c)\\nabla_\\textbf{w}L_{\\mathcal{D}_r}(f_{\\textbf{w}_u})$ is the optimal forgetting step, $H_{\\mathcal{D}_r}(\\textbf{w}_c)$ is the Hessian of the loss function $L_{\\mathcal{D}_r}$, $\\mathcal{D}_r=\\mathcal{D}-\\mathcal{D}_f$ is the retained data, and $\\epsilon \\sim N(0,I)$ is a random noise vector. As $\\Delta\\textbf{w}_u$ is only an approximation of the optimal forgetting step, by adding noise, they can destroy the information that may leak. In practice is not feasible to compute the Hessian, so they use the Jacobian-Vector Product (JVP) instead (see [2]).\nPersonal considerations: Although the method is interesting, I am not sure how practical it is. The theoretical framework heavily relies on the assumption that the perturbation $\\textbf{w}_u$ is small, which may not be the case in practice. I find useful the fact of using core data to train a \u0026ldquo;foundational\u0026rdquo; (or core) model and then fine-tune it with user data (actually, this is the trend in SOTA models e.g., for generative AI). However, if the user data is far from being \u0026ldquo;small enough\u0026rdquo; and because of the linear approximation, the method may not work as expected. References [1] Golatkar, A., Achille, A., Ravichandran, A., Polito, M., \u0026amp; Soatto, S. (2021). Mixed-Privacy Forgetting in Deep Networks arXiv:2012.13431.\n[2] Mu, F., Liang, Y., \u0026amp; Li, Y. (2020). Gradients as features for deep representation learning. arXiv:2004.05529\n[3] Guo, C., Goldstein, T., Hannun, A., \u0026amp; Van Der Maaten, L. (2020). Certified data removal from machine learning models arXiv:911.03030\n[4] Golatkar, A., Achille, A., \u0026amp; Soatto, S. (2020). Eternal sunshine of the spotless net: Selective forgetting in deep networks arXiv:1911.04933\n","permalink":"https://alex-pv01.github.io/posts/reading/mixed-privacy-forgetting-in-deep-networks/","summary":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Mixed-Privacy Forgetting in Deep Networks by Aditya Golatkar, Alessandro Achille, Avinash Ravichandran, Marzia Polito, and Stefano Soatto.\nGolatkar et. al. introduce a novel method for forgetting in a mixed-privacy setting, where a core subset of the training samples will not be forgotten.","title":"Notes on Mixed-Privacy Forgetting in Deep Networks"},{"content":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Multi Class Explainable Unlearning for Image Classification via Weight Filtering by Samuele Poppi, Sara Sarto, Marcella Cornia, Lorenzo Baraldi and Rita Cucchiara.\nSamuele P., et. al. propose a novel approach to unlearn a multiple classes from a pre-trained image classification model in a single untraining round. The technique learns a \u0026ldquo;Weight Filtering Network\u0026rdquo; (WF-Net) that is able to modulate the inner components of the model to remove the class of interest. The method discovers the weights that are responsible for the classification of the target class and then filters them out. This approach implicitly discovers the underlying relationships between network inner components and output classes and therefore allows to obtain a representation that can be employed for explainability purposes.\nIn comparison with single-class unlearning, WF-Net avoids the need of storing multiple models and performing multiple untraining rounds. This allows for a significant reduction in computational costs and memory usage, both at untraining and testing stages and provides increased flexibility.\nThe key observation is that there is a mapping between the inner components of a network and the output classes, as stated in [2]. Once trained, WF-Net is able to turn on and off those inner components to accomplish the desired unlearning behaviour on a class of choice. In practice, each layer $l$ of the pre-trained model is point-wise multiplied by a Weight Filtering (WF) layer $\\alpha_l$, which allows to modulate the weights of the model. The WF-Net, which is the sequence of all WF layers $\\alpha:=\\{\\alpha_l\\}_l$, is trained to remove a number of classes $N_c$ from the model. Note that $\\alpha_l$ has shape $N_c \\times K$, where $K$ is the length of $w_l$. After a single untraining round we end up with a single checkpoint of the WF-Net that can be used to instruct the model to behave as if any of the $N_c$ classes were never learned. It is possible to forget all classes at same time by setting $N_c$ to the total number of classes in the model. There are three key aspects regarding the training of the WF-Net:\nLoss function: Is composed of two terms, an unlearning loss $L_f$ and a retaining loss $L_r$. Both are implemented as cross-entropy losses. The total loss should be minimized zeroing $L_r(\\cdot)$ while maximizing $L_f(\\cdot)$: $$ L = \\lambda_0 \\sum_{(x,y)\\in\\mathcal{D_r}} L_r(M(x),y) + \\lambda_1 \\sum_{(x,y)\\in\\mathcal{D_f}} \\frac{1}{L_f(M(x),y)}$$ where $\\mathcal{D_r}$ and $\\mathcal{D_f}$ are the datasets of the classes to be retained and forgotten, respectively, $\\lambda_0$ and $\\lambda_1$ are hyperparameters that control the importance of the two terms, and $M$ is the WF model, i.e. the pre-trained model with fixed weights together with the WF-Net.\nRegularization: Adding a regularizer $R(\\cdot)$ to ensure only few parameters of $\\alpha_l$ are dropped to zero. $R(\\hat\\alpha)$ is computed as the average of inverted alphas $\\hat\\alpha_l:=1-\\alpha_l$: $$ L = \\lambda_0 \\sum_{(x,y)\\in\\mathcal{D_r}} L_r(M(x),y) + \\lambda_1 \\sum_{(x,y)\\in\\mathcal{D_f}} \\frac{1}{L_f(M(x),y)} + \\lambda_2 R(\\hat\\alpha)$$\nLabel expansion: To realize untraining of all classes simultaneously, during the training process, each mini-batch of size $B$ is divided into two halves, obtaining $B/2$ samples from the classes to be unlearned and $B/2$ samples from the classes to be retained. Samples from the first half are labeled with the original labels, while samples from the second half are randomly labeled. The random strategy is used to randomly retain one of the rows of each $\\alpha_l$. This retain step is performed $T$ times, pairing each time the samples with a different random label, and expanding the size of the retaining loss to $(T, B/2)$. The last step is averaging both losses.\nPersonal considerations: Note that this approach is not really about unlearning, but about modulating the weights of the network using an additional network that is able to filter out the weights that are responsible for the classification of one (or more) of the $N_c$ classes to be forgotten. Despite that, it is an interesting method that can be used to improve the explainability models while acting \u0026ldquo;as if\u0026rdquo; the model has been untrained from a certain class.\nI am sceptical about the computational efficiency of the model. As far as I understand, the WF-Net has as many parameters as the pre-trained model, and expands the size of the mini-batches by a factor of $T$. This could lead to a significant increase in the computational cost of the training process of the WF-Net.\nReferences [1] Poppi, S., Sarto, S., Cornia, M., Baraldi, L., \u0026amp; Cucchiara, R. (2023). Multi Class Explainable Unlearning for Image Classification via Weight Filtering. arXiv:2304.02049.\n[2] Wang, A., Lee, W., \u0026amp; Qi, X. (2022). HINT: Hierarchical Neuron Concept Explainer. arXiv:2203.14196.\n","permalink":"https://alex-pv01.github.io/posts/reading/multi-class-explainable-unlearning-for-image-classification-via-weight-filtering/","summary":"Disclaimer: This is part of my notes on AI research papers. I do this to learn and communicate what I understand. Feel free to comment if you have any suggestion, that would be very much appreciated.\nThe following post is a comment on the paper Multi Class Explainable Unlearning for Image Classification via Weight Filtering by Samuele Poppi, Sara Sarto, Marcella Cornia, Lorenzo Baraldi and Rita Cucchiara.\nSamuele P., et. al.","title":"Notes on Multi Class Explainable Unlearning for Image Classification via Weight Filtering"}]